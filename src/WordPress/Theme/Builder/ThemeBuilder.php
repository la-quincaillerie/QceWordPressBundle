<?php

namespace Qce\WordPressBundle\WordPress\Theme\Builder;

use Qce\WordPressBundle\WordPress\Theme\Theme;
use Symfony\Component\Config\ConfigCacheFactory;
use Symfony\Component\Config\ConfigCacheFactoryInterface;
use Symfony\Component\Filesystem\Filesystem;

class ThemeBuilder
{
    private ConfigCacheFactoryInterface $configCacheFactory;

    public function __construct(
        private string $themeDir,
        private Theme  $theme,
        private bool   $debug = false,
    )
    {
    }

    public function build(): void
    {
        $dir = $this->getThemeDir();
        $fs = new Filesystem();

        $this->getConfigCacheFactory()->cache($dir . '/style.css', function ($cache) use ($dir, $fs) {
            if (file_exists($this->theme->getStaticDir())) {
                $fs->mirror(
                    $this->theme->getStaticDir(),
                    $dir,
                    options: ['override' => true, 'delete' => true]
                );
            } else {
                $fs->remove($dir);
            }
            foreach ($this->theme->getControllers() as $path => $controller) {
                $filePath = $dir . '/' . $path;
                if (!file_exists($filePath)) {
                    $fs->dumpFile($filePath, $this->buildController($path, $controller->headers));
                }
            }
            $cache->write($this->buildStyle(), $this->theme->getResources());
        });
    }

    public function getThemeDir(): string
    {
        return $this->themeDir . "/" . $this->theme->getSlug();
    }

    public function getConfigCacheFactory(): ConfigCacheFactoryInterface
    {
        return $this->configCacheFactory ?? new ConfigCacheFactory($this->debug);
    }

    public function setConfigCacheFactory(ConfigCacheFactoryInterface $configCacheFactory): void
    {
        $this->configCacheFactory = $configCacheFactory;
    }

    /**
     * @param array<string, string> $headers
     */
    private function buildController(string $path, array $headers): string
    {
        return strtr(<<<EOF
            <?php

            /**
             * This file was auto-generated by the QceWordPressBundle
            HEADERS */
            
            global \$app;

            if(!defined('ABSPATH') || !isset(\$app)) return; // Prevent direct access

            echo \$app->getContainer()->get('qce_wordpress.theme')->render('FILE_PATH', get_defined_vars());

            EOF,
            [
                'HEADERS' => $this->formatHeaders($headers),
                'FILE_PATH' => $path,
            ]);
    }

    /**
     * @param array<string, string> $headers
     */
    private function formatHeaders(array $headers): string
    {
        $headersComment = '';
        foreach ($headers as $key => $value) {
            $headersComment .= " * $key: $value\n";
        }
        return $headersComment;
    }

    private function buildStyle(): string
    {
        return strtr(<<<EOF
            /**
             * This file was auto-generated by the QceWordPressBundle
            HEADERS */
            EOF,
            [
                'HEADERS' => $this->formatHeaders($this->theme->getHeaders()),
            ]);
    }
}

